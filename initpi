#!/bin/bash
#https://www.raspberrypi.org/documentation/configuration/security.md

#STOP SSH IF IT IS RUNNING (WON'T CAUSE EXIT OR TERMINATION OF CURRENT SESSION)
systemctl stop ssh

#EXIT IF NOT RUN AS ROOT
if [[ $(id -u) -ne 0 ]]
then
	printf "Please run as root\n"
	exit 1
fi

#INITPI PATHS
PATH_INITPI=$(readlink -f "$0")
PATH_INITPI_DIR=$(dirname "$PATH_INITPI")
PATH_INITPI_PATHS=$PATH_INITPI_DIR/paths
PATH_INITPI_CONF=$PATH_INITPI_DIR/initpi.conf
PATH_INITPI_FINISH=$PATH_INITPI_DIR/finish
PATH_INITPI_WIFI=$PATH_INITPI_DIR/wifi
PATH_INITPI_UPDATE=$PATH_INITPI_DIR/sysupdate
PATH_INITPI_TIMEZONE=$PATH_INITPI_DIR/timezone
PATH_INITPI_NEWUSER=$PATH_INITPI_DIR/newuser
PATH_INITPI_NEWPASSWORD=$PATH_INITPI_DIR/newpassword
PATH_INITPI_PUBKEY=$PATH_INITPI_DIR/pubkey
PATH_INITPI_SSH=$PATH_INITPI_DIR/ssh

#CONFIRM FILES
if ! [[ -f "$PATH_INITPI_FINISH" ]]
then
	printf "Please download all program files and place them in the same directory\n"
	exit 1
fi

#SET ALL OPTIONS TO ? (MANUAL ENTRY)
askall () {
	NEW_TIMEZONE=?
	NEW_SSID=?
	NEW_WPA=?
	OLD_USER=?
	NEW_USER=?
        NEW_PASSWORD=?
	NEW_PUBKEY=?
	NEW_SSH_PORT=?
	REVERT_TIMER=?
}

#IMPORT CONFIGURATION FILE
if [[ -f "$PATH_INITPI_CONF" ]]
then
	source $PATH_INITPI_CONF
	printf "Warning: configuration file will be deleted after run\n"
	if [[ -z "$NEW_TIMEZONE" && -z "$NEW_SSID" && -z "$NEW_WPA" && \
		-z "$OLD_USER" && -z "$NEW_USER" && -z "$NEW_PASSWORD" && \
		-z "$NEW_PUBKEY" && -z "$NEW_SSH_PORT" && -z "$REVERT_TIMER" ]]
	then
		printf "initpi.conf not changed, please answer questions\n"
		askall
	fi
else
	printf "No configuration file found, must manually enter all information\n"
	askall
fi

#GLOBALS
DEFAULT_USER=pi
IS_NUMBER='^[0-9]+$'
PATH_TZ=/usr/share/zoneinfo/posix
NETWORK_SCAN=$PATH_INITPI_DIR/networkscan
NETWORK_SCAN_LIST=$PATH_INITPI_DIR/networkscanlist

#USER INTERFACE
printf "Enter setup options, leave blank to skip that setup\n"

if [[ "$NEW_TIMEZONE" = "?" ]]
then
	until
		read -p "Enter timezone (ex: America/New_York): " NEW_TIMEZONE
		[[ -L "${PATH_TZ}/${NEW_TIMEZONE}" || -z "$NEW_TIMEZONE" ]]
	do
		printf "Invalid timezone, try again (see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)\n"
	done
fi
if [[ -n "$NEW_TIMEZONE" ]]
then
	printf "Timezone will be set up as '$NEW_TIMEZONE'\n"
else
	printf "No timezone will be set up\n"
fi

if [[ "$NEW_SSID" = "?" ]]
then
	printf "Available WiFi networks (wait up to 10 seconds for scan):\n"
	ifconfig wlan0 up
	maxcount=$((SECONDS+10))
	until iwlist wlan0 scan > "$NETWORK_SCAN" 2>/dev/null || ((SECONDS>maxcount))
	do
	        sleep 1
	done
	if [[ -f "$NETWORK_SCAN" ]]
	then
		sed -n -e 's/^.*ESSID://p' $NETWORK_SCAN | sed 's/"//g' > $NETWORK_SCAN_LIST
		rm $NETWORK_SCAN
		numnetworks=$(wc -l < $NETWORK_SCAN_LIST)
		grep -n '^' $NETWORK_SCAN_LIST
		msg="Enter a list number or a WiFi SSID: "
	else
		printf "Newtork scan timed out\n"
		msg="Enter WiFi SSID: "
	fi
	read -p "$msg" NEW_SSID
	if [[ "$NEW_SSID" =~ $IS_NUMBER && "$NEW_SSID" -le "$numnetworks" && "$NEW_SSID" -gt 0 ]]
	then
		NEW_SSID=$(sed -n ${NEW_SSID}p $NETWORK_SCAN_LIST)
	fi
	rm $NETWORK_SCAN_LIST
fi
if [[ -n "$NEW_SSID" ]]
then
	printf "WiFi network '$NEW_SSID' will be set up\n"
	if [[ "$NEW_WPA" = "?" ]]
	then
		while
			read -s -p "Enter WiFi key: " NEW_WPA
			printf "\n"
			read -s -p "Confirm key: " NEW_WPA2
			printf "\n"
			[[ "$NEW_WPA" != "$NEW_WPA2" ]]
		do
			printf "Mismatch, try again\n"
		done
		if [[ -n "$NEW_WPA" ]]
		then
			printf "WiFi password saved\n"
		else
			printf "No WiFi password will be set up, assuming open network\n"
		fi
	fi
else
	printf "No WiFi will be set up\n"
fi

if [[ "$OLD_USER" = "?" ]]
then
	until
		read -p "Enter current username (default=$DEFAULT_USER): " OLD_USER
		[[ -n $(getent passwd | grep "^$OLD_USER:") ]] || [[ -z "$OLDUSER" && -n $(getent passwd | grep "^$DEFAULT_USER:") ]]
	do
		printf "Invalid user, try again\n"
	done
fi
if [[ -n "$OLD_USER" ]]
then
	printf "User $OLD_USER selected\n"
else
	if [[ -n $(getent passwd | grep "^$DEFAULT_USER:") ]]
	then
		OLD_USER=$DEFAULT_USER
	else
		printf "No user specified and no $DEFAULT_USER user exists!\n"
		exit 1
	fi
fi

if [[ "$NEW_USER" = "?" ]]
then
	read -p "Enter username to replace $OLD_USER: " NEW_USER
fi
if [[ -n "$NEW_USER" ]]
then
	printf "User $NEW_USER will be created\n"
else
	NEW_USER=$OLD_USER
	printf "No new user will be set up, user $OLD_USER will remain\n"
fi

if [[ "$NEW_PASSWORD" = "?" ]]
then
	printf "Change password for user $NEW_USER\n"
	while
		read -s -p "New password: " NEW_PASSWORD
		printf "\n"
		read -s -p "Confirm: " NEW_PASSWORD2
		printf "\n"
		[[ "$NEW_PASSWORD" != "$NEW_PASSWORD2" ]]
	do
		printf "Mismatch, try again\n"
	done
fi
if [[ -n "$NEW_PASSWORD" ]]
then
	printf "Password saved\n"
else
	if [[ "$OLD_USER" = "$NEW_USER" ]]
	then
		printf "$OLD_USER still has default password, be sure to use SSH keys\n"
	else
		printf "New user $NEW_USER will have a disabled password, be sure to use SSH keys\n"
	fi
fi

if [[ "$NEW_PUBKEY" = "?" ]]
then
	read -p "Enter SSH public key (or abs path or URL): " NEW_PUBKEY
fi
if [[ -n "$NEW_PUBKEY" ]]
then
	printf "Public key saved\n"
else
	printf "No public key will be setup\n"
fi

if [[ "$NEW_SSH_PORT" = "?" ]]
then
	until
		read -p "Enter new SSH port number: " NEW_SSH_PORT
		[[ "$NEW_SSH_PORT" =~ $IS_NUMBER || -z "$IS_NUMBER" ]]
	do
		printf "Invalid entry, please try again\n"
	done
fi
if [[ -n "$NEW_SSH_PORT" ]]
then
	printf "SSH port will be changed to $NEW_SSH_PORT\n"
else
	printf "No SSH port provided, default 22 will be used\n"
	NEW_SSH_PORT=22
fi

if [[ "$REVERT_TIMER" = "?" ]]
then
	printf "System will wait for a matter of time for a login to occur\n"
	printf "before reverting back to default user, and SSH settings.\n"
	printf "Enter 0 to skip this, default is 60\n"
	until
		read -p "Enter reversion wait time: " REVERT_TIMER
		[[ "$REVERT_TIMER" =~ $IS_NUMBER && "$REVERT_TIMER" -ge 0 ]] || [[ -z "$REVERT_TIMER" ]]
	do
		printf "Invalid entry, try again\n"
	done
fi
if [[ -n "$REVERT_TIMER" ]]
then
	if [[ "$REVERT_TIMER" -eq 0 ]]
	then
		printf "Timer will be skipped\n"
	else
		printf "Timer will be $REVERT_TIMER minutes\n"
	fi
else
	printf "Timer will be set to default (60 minutes)\n"
	REVERT_TIMER=60
fi

#VALIDATE INPUTS:
if [[ -z "$NEW_PASSWORD" && -z "$NEW_PUBKEY" ]]
then
	printf "Must either supply a password or public key, please try again\n"
	exit 1
fi

#SET PATHS
source $PATH_INITPI_PATHS

#CREATE BACKUPS
if [[ -d $PATH_INITPI_BACKUPS ]]
then
	rm -r $PATH_INITPI_BACKUPS
fi
mkdir $PATH_INITPI_BACKUPS
cp -a $PATH_OLD_USER_HOME $PATH_USER_BACKUP
cp $PATH_WPA_CONF $PATH_WPA_CONF_BACKUP
cp $PATH_SUDO_PASSWORD_CONF $PATH_SUDO_PASSWORD_CONF_BACKUP
cp $PATH_RCLOCAL $PATH_RCLOCAL_BACKUP
cp $PATH_SSH_CONF $PATH_SSH_CONF_BACKUP

#PERFORM CONFIGURATIONS

if [[ -n $NEW_SSID ]]
then
	$PATH_INITPI_WIFI $NEW_SSID $NEW_WPA
fi

$PATH_INITPI_UPDATE

if [[ -n $NEW_TIMEZONE ]]
then
	$PATH_INITPI_TIMEZONE $NEW_TIMEZONE
fi

if [[ "$OLD_USER" != "$NEW_USER" ]]
then
	$PATH_INITPI_NEWUSER $NEW_USER $PATH_USER_BACKUP
	chage -E 0 $NEW_USER #lock user for later
fi

$PATH_INITPI_NEWPASSWORD $NEW_USER $NEW_PASSWORD

apt-get install openssh-server -y

if [[ -n "$NEW_PUBKEY" ]]
then
	$PATH_INITPI_PUBKEY $NEW_USER $NEW_PUBKEY
fi

$PATH_INITPI_SSH $NEW_SSH_PORT $NEW_PUBKEY

#INSTALL FIREWALL
apt-get install ufw -y

#INSTALL FAIL2BAN
apt-get install fail2ban -y

#DELETE CONFIGURATION FILE IF EXISTS
if [[ -f "$PATH_INITPI_CONF" ]]
then
	rm $PATH_INITPI_CONF
fi

#PREPARE FOR RESTART (SET UP rc.local)
sed -i "/^exit 0/d" $PATH_RCLOCAL
printf "### BEGIN INITPI ###\n" >> $PATH_RCLOCAL
printf "$PATH_INITPI_FINISH $OLD_USER $NEW_USER $NEW_SSH_PORT $REVERT_TIMER &\n" >> $PATH_RCLOCAL
printf "### END INITPI ###\n" >> $PATH_RCLOCAL
printf "exit 0\n" >> $PATH_RCLOCAL

reboot
